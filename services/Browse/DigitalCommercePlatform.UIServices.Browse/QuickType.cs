// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var pokedex = Pokedex.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Pokedex
    {
        [JsonProperty("Menu")]
        public Menu Menu { get; set; }
    }

    public partial class Menu
    {
        [JsonProperty("Products")]
        public List<Product> Products { get; set; }

        [JsonProperty("Solutions")]
        public List<Solution> Solutions { get; set; }

        [JsonProperty("Services")]
        public List<Service> Services { get; set; }

        [JsonProperty("Brands")]
        public List<Brand> Brands { get; set; }

        [JsonProperty("About Us")]
        public List<AboutUs> AboutUs { get; set; }
    }

    public partial class AboutUs
    {
        [JsonProperty("Our News")]
        public List<OurNew> OurNews { get; set; }

        [JsonProperty("Our Company")]
        public List<OurCompany> OurCompany { get; set; }

        [JsonProperty("Our Purpose")]
        public List<OurPurpose> OurPurpose { get; set; }

        [JsonProperty("Our Careers")]
        public List<OurCareer> OurCareers { get; set; }
    }

    public partial class OurCareer
    {
        [JsonProperty("How we Hire")]
        public List<AudioVisual> HowWeHire { get; set; }

        [JsonProperty("A Rewarding Experience")]
        public List<AudioVisual> ARewardingExperience { get; set; }

        [JsonProperty("Join Our Team")]
        public List<AudioVisual> JoinOurTeam { get; set; }

        [JsonProperty("Life at Tech Data")]
        public List<AudioVisual> LifeAtTechData { get; set; }
    }

    public partial class AudioVisual
    {
        [JsonProperty("path")]
        public Path Path { get; set; }

        [JsonProperty("lastModified")]
        public string LastModified { get; set; }

        [JsonProperty("url")]
        public Url Url { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("private")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool Private { get; set; }

        [JsonProperty("parent")]
        public Parent Parent { get; set; }
    }

    public partial class OurCompany
    {
        [JsonProperty("What We Do")]
        public List<AudioVisual> WhatWeDo { get; set; }

        [JsonProperty("Who We Are")]
        public List<AudioVisual> WhoWeAre { get; set; }

        [JsonProperty("How We Operate")]
        public List<AudioVisual> HowWeOperate { get; set; }

        [JsonProperty("Where We Are")]
        public List<AudioVisual> WhereWeAre { get; set; }
    }

    public partial class OurNew
    {
        [JsonProperty("Blog")]
        public List<AudioVisual> Blog { get; set; }

        [JsonProperty("Media Contact")]
        public List<AudioVisual> MediaContact { get; set; }

        [JsonProperty("News Releases")]
        public List<AudioVisual> NewsReleases { get; set; }

        [JsonProperty("Recent News")]
        public List<AudioVisual> RecentNews { get; set; }

        [JsonProperty("Awards")]
        public List<AudioVisual> Awards { get; set; }
    }

    public partial class OurPurpose
    {
        [JsonProperty("People")]
        public List<AudioVisual> People { get; set; }

        [JsonProperty("Planet")]
        public List<AudioVisual> Planet { get; set; }

        [JsonProperty("Progress")]
        public List<AudioVisual> Progress { get; set; }
    }

    public partial class Brand
    {
        [JsonProperty("Featured")]
        public List<Dictionary<string, List<AudioVisual>>> Featured { get; set; }

        [JsonProperty("By Solution")]
        public List<BySolution> BySolution { get; set; }

        [JsonProperty("By Name")]
        public List<Dictionary<string, List<AudioVisual>>> ByName { get; set; }
    }

    public partial class BySolution
    {
        [JsonProperty("Edge")]
        public List<AudioVisual> Edge { get; set; }

        [JsonProperty("Data Lifecycle")]
        public List<AudioVisual> DataLifecycle { get; set; }

        [JsonProperty("Networking & Communications")]
        public List<AudioVisual> NetworkingCommunications { get; set; }

        [JsonProperty("Data Center & Cloud")]
        public List<AudioVisual> DataCenterCloud { get; set; }

        [JsonProperty("Security")]
        public List<AudioVisual> Security { get; set; }
    }

    public partial class Product
    {
        [JsonProperty("Computing")]
        public List<Computing> Computing { get; set; }

        [JsonProperty("Mobility & IoT")]
        public List<AudioVisual> MobilityIoT { get; set; }

        [JsonProperty("Data Center")]
        public List<AudioVisual> DataCenter { get; set; }

        [JsonProperty("Printers & Scanners")]
        public List<AudioVisual> PrintersScanners { get; set; }

        [JsonProperty("Software")]
        public List<AudioVisual> Software { get; set; }

        [JsonProperty("Networking")]
        public List<AudioVisual> Networking { get; set; }

        [JsonProperty("Components")]
        public List<AudioVisual> Components { get; set; }

        [JsonProperty("Audio Visual")]
        public List<AudioVisual> AudioVisual { get; set; }

        [JsonProperty("Supplies")]
        public List<AudioVisual> Supplies { get; set; }

        [JsonProperty("Warranties")]
        public List<AudioVisual> Warranties { get; set; }

        [JsonProperty("On Sale & Promos")]
        public List<AudioVisual> OnSalePromos { get; set; }
    }

    public partial class Computing
    {
        [JsonProperty("Laptops")]
        public List<AudioVisual> Laptops { get; set; }

        [JsonProperty("Desktops")]
        public List<AudioVisual> Desktops { get; set; }

        [JsonProperty("Servers")]
        public List<AudioVisual> Servers { get; set; }

        [JsonProperty("Tablet & e-Books")]
        public List<AudioVisual> TabletEBooks { get; set; }

        [JsonProperty("Industrial Handhelds")]
        public List<AudioVisual> IndustrialHandhelds { get; set; }

        [JsonProperty("POS Systems")]
        public List<AudioVisual> PosSystems { get; set; }

        [JsonProperty("Warranties")]
        public List<AudioVisual> Warranties { get; set; }

        [JsonProperty("Configuration Services")]
        public List<AudioVisual> ConfigurationServices { get; set; }

        [JsonProperty("Deals & On Sale")]
        public List<AudioVisual> DealsOnSale { get; set; }
    }

    public partial class Service
    {
        [JsonProperty("Global Lifecycle Management")]
        public List<GlobalLifecycleManagement> GlobalLifecycleManagement { get; set; }

        [JsonProperty("Digital Practice Builder")]
        public List<DigitalPracticeBuilder> DigitalPracticeBuilder { get; set; }

        [JsonProperty("Specialty Services")]
        public List<SpecialtyService> SpecialtyServices { get; set; }
    }

    public partial class DigitalPracticeBuilder
    {
        [JsonProperty("Business Strategy")]
        public List<AudioVisual> BusinessStrategy { get; set; }

        [JsonProperty("Engineering Strategy")]
        public List<AudioVisual> EngineeringStrategy { get; set; }

        [JsonProperty("Lifecycle Strategy")]
        public List<AudioVisual> LifecycleStrategy { get; set; }

        [JsonProperty("Marketing Strategy")]
        public List<AudioVisual> MarketingStrategy { get; set; }

        [JsonProperty("Operations Strategy")]
        public List<AudioVisual> OperationsStrategy { get; set; }

        [JsonProperty("Tech Data Community")]
        public List<AudioVisual> TechDataCommunity { get; set; }

        [JsonProperty("Sales Strategy")]
        public List<AudioVisual> SalesStrategy { get; set; }

        [JsonProperty("Finance Strategy")]
        public List<AudioVisual> FinanceStrategy { get; set; }
    }

    public partial class GlobalLifecycleManagement
    {
        [JsonProperty("Supply Chain")]
        public List<AudioVisual> SupplyChain { get; set; }

        [JsonProperty("Integration")]
        public List<AudioVisual> Integration { get; set; }

        [JsonProperty("Deployment")]
        public List<AudioVisual> Deployment { get; set; }

        [JsonProperty("Maintenance & Support")]
        public List<AudioVisual> MaintenanceSupport { get; set; }

        [JsonProperty("Repair")]
        public List<AudioVisual> Repair { get; set; }

        [JsonProperty("IT Asset Disposition")]
        public List<AudioVisual> ItAssetDisposition { get; set; }

        [JsonProperty("Channel Management")]
        public List<AudioVisual> ChannelManagement { get; set; }

        [JsonProperty("Customer Success")]
        public List<AudioVisual> CustomerSuccess { get; set; }

        [JsonProperty("Certification & Training")]
        public List<AudioVisual> CertificationTraining { get; set; }

        [JsonProperty("Revenue Retention")]
        public List<AudioVisual> RevenueRetention { get; set; }
    }

    public partial class SpecialtyService
    {
        [JsonProperty("Maverick")]
        public List<AudioVisual> Maverick { get; set; }

        [JsonProperty("Datech")]
        public List<AudioVisual> Datech { get; set; }
    }

    public partial class Solution
    {
        [JsonProperty("Edge")]
        public List<Edge> Edge { get; set; }

        [JsonProperty("Datacenter & Cloud")]
        public List<DatacenterCloud> DatacenterCloud { get; set; }

        [JsonProperty("Data Lifecycle")]
        public List<DataLifecycle> DataLifecycle { get; set; }

        [JsonProperty("Security")]
        public List<Security> Security { get; set; }

        [JsonProperty("Networking & Communications")]
        public List<NetworkingCommunication> NetworkingCommunications { get; set; }
    }

    public partial class DataLifecycle
    {
        [JsonProperty("Data Management")]
        public List<AudioVisual> DataManagement { get; set; }

        [JsonProperty("Artificial Intelligence")]
        public List<AudioVisual> ArtificialIntelligence { get; set; }

        [JsonProperty("Data Capture / IoT")]
        public List<AudioVisual> DataCaptureIoT { get; set; }

        [JsonProperty("Analytics")]
        public List<AudioVisual> Analytics { get; set; }

        [JsonProperty("Design Software")]
        public List<AudioVisual> DesignSoftware { get; set; }

        [JsonProperty("Business Integration & Application SW")]
        public List<AudioVisual> BusinessIntegrationApplicationSw { get; set; }
    }

    public partial class DatacenterCloud
    {
        [JsonProperty("NextGen/SD DC")]
        public List<AudioVisual> NextGenSdDc { get; set; }

        [JsonProperty("Integration Layer")]
        public List<AudioVisual> IntegrationLayer { get; set; }

        [JsonProperty("Public Cloud")]
        public List<AudioVisual> PublicCloud { get; set; }
    }

    public partial class Edge
    {
        [JsonProperty("Modern Edge")]
        public List<AudioVisual> ModernEdge { get; set; }

        [JsonProperty("Visual Edge")]
        public List<AudioVisual> VisualEdge { get; set; }

        [JsonProperty("Mobile Edge")]
        public List<AudioVisual> MobileEdge { get; set; }
    }

    public partial class NetworkingCommunication
    {
        [JsonProperty("Networking")]
        public List<AudioVisual> Networking { get; set; }

        [JsonProperty("Unified Communications")]
        public List<AudioVisual> UnifiedCommunications { get; set; }

        [JsonProperty("Communications Management")]
        public List<AudioVisual> CommunicationsManagement { get; set; }

        [JsonProperty("Workplace Management & Collaboration")]
        public List<AudioVisual> WorkplaceManagementCollaboration { get; set; }
    }

    public partial class Security
    {
        [JsonProperty("Security")]
        public List<AudioVisual> SecuritySecurity { get; set; }
    }

    public enum Parent { AboutUs, Brands, Products, Services, Solutions };

    public enum Path { ContentWeRetailLanguageMastersEnBrandsWomenCoats, ContentWeRetailLanguageMastersEnProductsWomenCoats, ContentWeRetailLanguageMastersEnServicesWomenCoats };

    public enum Url { ContentWeRetailLanguageMastersEnBrandsWomenCoatsHtml, ContentWeRetailLanguageMastersEnProductsWomenCoatsHtml, ContentWeRetailLanguageMastersEnServicesWomenCoatsHtml };

    public partial class Pokedex
    {
        public static Pokedex FromJson(string json) => JsonConvert.DeserializeObject<Pokedex>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Pokedex self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ParentConverter.Singleton,
                PathConverter.Singleton,
                UrlConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Parent) || t == typeof(Parent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "About Us":
                    return Parent.AboutUs;
                case "Brands":
                    return Parent.Brands;
                case "Products":
                    return Parent.Products;
                case "Services":
                    return Parent.Services;
                case "Solutions":
                    return Parent.Solutions;
            }
            throw new Exception("Cannot unmarshal type Parent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Parent)untypedValue;
            switch (value)
            {
                case Parent.AboutUs:
                    serializer.Serialize(writer, "About Us");
                    return;
                case Parent.Brands:
                    serializer.Serialize(writer, "Brands");
                    return;
                case Parent.Products:
                    serializer.Serialize(writer, "Products");
                    return;
                case Parent.Services:
                    serializer.Serialize(writer, "Services");
                    return;
                case Parent.Solutions:
                    serializer.Serialize(writer, "Solutions");
                    return;
            }
            throw new Exception("Cannot marshal type Parent");
        }

        public static readonly ParentConverter Singleton = new ParentConverter();
    }

    internal class PathConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Path) || t == typeof(Path?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "/content/we-retail/language-masters/en/Brands/women/coats":
                    return Path.ContentWeRetailLanguageMastersEnBrandsWomenCoats;
                case "/content/we-retail/language-masters/en/Services/women/coats":
                    return Path.ContentWeRetailLanguageMastersEnServicesWomenCoats;
                case "/content/we-retail/language-masters/en/products/women/coats":
                    return Path.ContentWeRetailLanguageMastersEnProductsWomenCoats;
            }
            throw new Exception("Cannot unmarshal type Path");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Path)untypedValue;
            switch (value)
            {
                case Path.ContentWeRetailLanguageMastersEnBrandsWomenCoats:
                    serializer.Serialize(writer, "/content/we-retail/language-masters/en/Brands/women/coats");
                    return;
                case Path.ContentWeRetailLanguageMastersEnServicesWomenCoats:
                    serializer.Serialize(writer, "/content/we-retail/language-masters/en/Services/women/coats");
                    return;
                case Path.ContentWeRetailLanguageMastersEnProductsWomenCoats:
                    serializer.Serialize(writer, "/content/we-retail/language-masters/en/products/women/coats");
                    return;
            }
            throw new Exception("Cannot marshal type Path");
        }

        public static readonly PathConverter Singleton = new PathConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class UrlConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Url) || t == typeof(Url?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "/content/we-retail/language-masters/en/Brands/women/coats.html":
                    return Url.ContentWeRetailLanguageMastersEnBrandsWomenCoatsHtml;
                case "/content/we-retail/language-masters/en/Services/women/coats.html":
                    return Url.ContentWeRetailLanguageMastersEnServicesWomenCoatsHtml;
                case "/content/we-retail/language-masters/en/products/women/coats.html":
                    return Url.ContentWeRetailLanguageMastersEnProductsWomenCoatsHtml;
            }
            throw new Exception("Cannot unmarshal type Url");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Url)untypedValue;
            switch (value)
            {
                case Url.ContentWeRetailLanguageMastersEnBrandsWomenCoatsHtml:
                    serializer.Serialize(writer, "/content/we-retail/language-masters/en/Brands/women/coats.html");
                    return;
                case Url.ContentWeRetailLanguageMastersEnServicesWomenCoatsHtml:
                    serializer.Serialize(writer, "/content/we-retail/language-masters/en/Services/women/coats.html");
                    return;
                case Url.ContentWeRetailLanguageMastersEnProductsWomenCoatsHtml:
                    serializer.Serialize(writer, "/content/we-retail/language-masters/en/products/women/coats.html");
                    return;
            }
            throw new Exception("Cannot marshal type Url");
        }

        public static readonly UrlConverter Singleton = new UrlConverter();
    }
}
